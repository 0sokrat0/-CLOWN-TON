import logging
import uuid
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.state import StateFilter
from spam.dramatiq_tasks import prepare_mass_mailing, spam_service, notify_admins
from aiogram.exceptions import TelegramBadRequest

from config import TOKEN, ADMINS

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è FSM (Finite State Machine) - –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç
class SpamState(StatesGroup):
    waiting_for_language = State()
    waiting_for_content = State()
    waiting_for_buttons = State()
    waiting_for_button_text = State()
    waiting_for_button_url = State()
    waiting_for_confirmation = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Command("spam"), F.from_user.id.in_(ADMINS))
async def spam_start(message: Message, state: FSMContext):
    languages_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="spam_language_ru")],
        [InlineKeyboardButton(text="üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="spam_language_en")],
        [InlineKeyboardButton(text="üîÉ –í—Å–µ —è–∑—ã–∫–∏", callback_data="spam_language_all")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_spam_creation")]
    ])
    await message.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=languages_keyboard)
    await state.set_state(SpamState.waiting_for_language)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@router.callback_query(F.data.startswith("spam_language_"))
async def select_language(callback_query: CallbackQuery, state: FSMContext):
    language = callback_query.data.split("_")[-1]
    await state.update_data(language=language)

    await callback_query.message.edit_text("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await state.set_state(SpamState.waiting_for_content)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(StateFilter(SpamState.waiting_for_content), F.from_user.id.in_(ADMINS))
async def receive_spam_content(message: Message, state: FSMContext):
    data = await state.get_data()
    photo = message.photo[-1].file_id if message.photo else None
    caption = message.html_text or message.caption  # –ò—Å–ø–æ–ª—å–∑—É–µ–º html_text –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    if not caption and not photo:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    await state.update_data(photo=photo, caption=caption)

    add_buttons_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="add_buttons"),
         InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_buttons")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_language")]
    ])

    await message.answer("‚ûï –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?", reply_markup=add_buttons_keyboard)
    await state.set_state(SpamState.waiting_for_buttons)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
@router.callback_query(F.data == "back_to_language")
async def back_to_language(callback_query: CallbackQuery, state: FSMContext):
    languages_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="spam_language_ru")],
        [InlineKeyboardButton(text="üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="spam_language_en")],
        [InlineKeyboardButton(text="üîÉ –í—Å–µ —è–∑—ã–∫–∏", callback_data="spam_language_all")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_spam_creation")]
    ])
    await callback_query.message.edit_text("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=languages_keyboard)
    await state.set_state(SpamState.waiting_for_language)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "add_buttons")
async def ask_for_buttons(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏.")
    await state.set_state(SpamState.waiting_for_button_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
@router.message(StateFilter(SpamState.waiting_for_button_text), F.from_user.id.in_(ADMINS))
async def receive_button_text(message: Message, state: FSMContext):
    button_text = message.text
    await state.update_data(button_text=button_text)
    await message.answer("üåê –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏.")
    await state.set_state(SpamState.waiting_for_button_url)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∫–Ω–æ–ø–∫–∏
@router.message(StateFilter(SpamState.waiting_for_button_url), F.from_user.id.in_(ADMINS))
async def receive_button_url(message: Message, state: FSMContext):
    button_url = message.text
    data = await state.get_data()
    button_text = data.get("button_text")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
    keyboard = data.get("keyboard", [])
    keyboard.append([InlineKeyboardButton(text=button_text, url=button_url)])
    await state.update_data(keyboard=keyboard)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    buttons_list = data.get("buttons_list", "")
    buttons_list += f"\n- <b>{button_text}</b>: {button_url}"
    await state.update_data(buttons_list=buttons_list)

    add_more_buttons_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É", callback_data="add_buttons"),
         InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="finish_buttons")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_content")]
    ])

    await message.answer("üîò –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É?", reply_markup=add_more_buttons_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@router.callback_query(F.data == "back_to_content")
async def back_to_content(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await state.set_state(SpamState.waiting_for_content)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "finish_buttons")
async def finish_buttons(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo = data.get('photo')
    caption = data.get('caption')
    buttons_list = data.get('buttons_list', '')  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    keyboard = InlineKeyboardMarkup(inline_keyboard=data.get('keyboard', []))

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_spam")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_spam_creation")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buttons")]
    ])

    final_message = f"üìÑ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n\n{caption}"
    if buttons_list:
        final_message += f"\n\nüîò –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–Ω–æ–ø–∫–∏:{buttons_list}"

    if photo:
        await callback_query.message.answer_photo(photo=photo, caption=caption, parse_mode="HTML")
    await callback_query.message.answer(final_message, reply_markup=confirm_keyboard, parse_mode="HTML")

    await state.set_state(SpamState.waiting_for_confirmation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "back_to_buttons")
async def back_to_buttons(callback_query: CallbackQuery, state: FSMContext):
    add_more_buttons_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É", callback_data="add_more_buttons"),
         InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="finish_buttons")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_content")]
    ])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if callback_query.message.text:
        await callback_query.message.edit_text("üîò –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É?",
                                               reply_markup=add_more_buttons_keyboard)
    else:
        await callback_query.message.answer("üîò –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É?",
                                            reply_markup=add_more_buttons_keyboard)

    await state.set_state(SpamState.waiting_for_buttons)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "skip_buttons")
async def skip_buttons(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo = data.get('photo')
    caption = data.get('caption')
    buttons_list = data.get('buttons_list', '')  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_spam")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_spam_creation")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_content")]
    ])

    final_message = f"üìÑ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n\n{caption}"
    if buttons_list:
        final_message += f"\n\nüîò –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–Ω–æ–ø–∫–∏:{buttons_list}"

    if photo:
        await callback_query.message.answer_photo(photo=photo, caption=caption, parse_mode="HTML")
    await callback_query.message.answer(final_message, reply_markup=confirm_keyboard, parse_mode="HTML")

    await state.set_state(SpamState.waiting_for_confirmation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "confirm_spam")
async def confirm_spam(callback_query: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        language = data.get('language')
        photo = data.get('photo')
        caption = data.get('caption')
        keyboard = data.get('keyboard')
        campaign_id = str(uuid.uuid4())

        if not caption and not photo:
            await callback_query.message.answer("‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–¥–∞—á–∏
        keyboard_data = [[{'text': btn.text, 'url': btn.url} for btn in row] for row in keyboard] if keyboard else None

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
        prepare_mass_mailing.send(language, photo, caption, campaign_id, keyboard_data)

        await callback_query.message.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!", parse_mode="HTML")
    except TelegramBadRequest as e:
        logging.error(f"Skipping BadRequest error: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.", parse_mode="HTML")
    except Exception as e:
        logging.error(f"Unhandled exception: {e}")
        await callback_query.message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.", parse_mode="HTML")
    finally:
        await state.clear()


