import logging
from aiogram import F, Router, Bot
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
import config as cfg
from app.handlers import show_main_menu
from database.db import Database
import app.keyboards as kb
import pandas as pd
from datetime import datetime
from config import TOKEN, ADMINS
from redis.asyncio import Redis

db = Database(cfg.db_config)
router = Router()


async def ensure_db_connection():
    if db.pool is None:
        await db.connect()
        if db.pool is None:
            raise Exception("Failed to connect to the database")
        print("Database connected successfully.")


@router.message(Command("admin_panel"), F.from_user.id.in_(cfg.ADMINS))
async def admin_panel(message: Message):
    await ensure_db_connection()
    logging.info(f"Admin command accessed by {message.from_user.id}")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb.admin)


@router.callback_query(F.data == "admin_analytics")
async def admin_analytics(callback: CallbackQuery):
    await callback.answer("Admin Analytics")
    try:
        stats = await db.get_detailed_user_statistics()
        total_referral_bonus = await db.calculate_total_referral_bonuses()
        total_referrals = await db.count_total_referrals()
        active_referrers = await db.count_active_referrers()  # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–æ–≤

        analytics_data = (
            "üìä <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n\n"
            f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']}\n"
            f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é):</b> {stats['active_users']}\n"
            f"üÜï <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é):</b> {stats['new_users']}\n"
            f"üí∞ <b>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {stats['average_bonus_per_user']:.2f}\n"
            f"üèÖ <b>–í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤:</b> {stats['total_bonus']}\n"
            f"üîó <b>–û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:</b> {total_referral_bonus}\n"
            f"üë´ <b>–û–±—â–µ–µ —á–∏—Å–ª–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {total_referrals}\n"
            f"ü§ù <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä—ã (–∫—Ç–æ –ø—Ä–∏–≤–ª—ë–∫ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞):</b> {active_referrers}\n"
            f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–¥–æ–±–∞–≤–∏—Ç—å $CLOWN –∫ –∏–º–µ–Ω–∏):</b> {stats['task_name_completed']}\n"
            f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª):</b> {stats['task_subscribe_completed']}\n"
            f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π):</b> {stats['task_invite_completed']}"
        )
        await callback.message.edit_text(analytics_data, parse_mode=ParseMode.HTML, reply_markup=kb.admin_back)
    except Exception as e:
        logging.error(f"Error fetching analytics: {str(e)}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")


@router.callback_query(F.data == "admin_panel_back")
async def back_admin(callback: CallbackQuery):
    await callback.answer("Back")
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb.admin)





@router.callback_query(F.data == "back_admin")
async def back_admin(callback: CallbackQuery):
    await callback.answer("Back")
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb.admin)



@router.callback_query(F.data.startswith("admin_user_list"))
async def admin_user_list(callback: CallbackQuery):
    await callback.answer("User List")
    try:
        await ensure_db_connection()
        page = int(callback.data.split(":")[1]) if ":" in callback.data else 0
        limit = 50
        offset = page * limit

        total_users = await db.get_user_count()
        users = await db.get_users_paginated(offset, limit)

        user_list = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for user in users:
            user_list += f"üë§ <b>ID:</b> {user['user_id']}, <b>Name:</b> @{user['tg_name']}, <b>Bonus Points:</b> {user['bonus_points']}\n"

        pagination_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"admin_user_list:{page - 1}" if page > 0 else "noop"
                ),
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"admin_user_list:{page + 1}" if (offset + limit) < total_users else "noop"
                ),
            ],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_admin")]
        ])

        await callback.message.edit_text(user_list, parse_mode=ParseMode.HTML, reply_markup=pagination_keyboard)
    except Exception as e:
        logging.error(f"Error fetching user list: {str(e)}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")


@router.callback_query(F.data == "noop")
async def noop(callback: CallbackQuery):
    await callback.answer()


@router.callback_query(F.data == "export_users")
async def export_users(callback: CallbackQuery):
    try:
        await ensure_db_connection()
        query = "SELECT * FROM users"

        async with db.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(query)
                data = await cursor.fetchall()
                columns = [desc[0] for desc in cursor.description]

        if data:
            df = pd.DataFrame(data, columns=columns)
            file_path = 'users_export.xlsx'
            df.to_excel(file_path, index=False)
            file = FSInputFile(file_path)
            await callback.message.answer_document(
                document=file,
                caption=f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–∞ <b>{datetime.now().strftime("%d-%m-%Y")}</b>',
                parse_mode='HTML'
            )
        else:
            await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

